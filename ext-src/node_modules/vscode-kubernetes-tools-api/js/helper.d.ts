import { Extension, API, ComponentKey, Version } from '.';
import { ClusterProviderV1 } from './clusterprovider/v1';
import { KubectlV1 } from './kubectl/v1';
import { ClusterExplorerV1 } from './cluster-explorer/v1';
import { HelmV1 } from './helm/v1';
import { CloudExplorerV1 } from './cloudexplorer/v1';
import { ConfigurationV1 } from './configuration/v1';
import { ClusterExplorerV1_1 } from './cluster-explorer/v1_1';
import { LocalTunnelDebuggerV1 } from './localtunneldebugger/v1';
import { ConfigurationV1_1 } from './configuration/v1_1';
export declare class ExtensionHelper implements Extension {
    private readonly apiBroker;
    getCore(component: string, version: string): Promise<API<any>>;
    get<T>(component: ComponentKey<T>, version: Version<T>): Promise<API<T>>;
    readonly clusterProvider: Readonly<{
        v1: Promise<API<ClusterProviderV1>>;
    }>;
    readonly kubectl: Readonly<{
        v1: Promise<API<KubectlV1>>;
    }>;
    readonly clusterExplorer: Readonly<{
        v1: Promise<API<ClusterExplorerV1>>;
        v1_1: Promise<API<ClusterExplorerV1_1>>;
    }>;
    readonly helm: Readonly<{
        v1: Promise<API<HelmV1>>;
    }>;
    readonly cloudExplorer: Readonly<{
        v1: Promise<API<CloudExplorerV1>>;
    }>;
    readonly configuration: Readonly<{
        v1: Promise<API<ConfigurationV1>>;
        v1_1: Promise<API<ConfigurationV1_1>>;
    }>;
    readonly localTunnelDebugger: Readonly<{
        v1: Promise<API<LocalTunnelDebuggerV1>>;
    }>;
}
